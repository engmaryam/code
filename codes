Given a List of words, return the words that can be typed using letters of alphabet on only one row's o
f American keyboard like the below.

 [qwertyuiop]+|[asdfghjkl]+|[zxcvbnm]
 Input: ["Hello", "Alaska", "Dad", "Peace"]
Output: ["Alaska", "Dad"]

my code
:
public String[] findWords(String[] words) {
        if (words == null) {
            return null;
        }
        List<String> list = new ArrayList();
        for (String word : words) {
            if (word.toLowerCase().matches("[qwertyuiop]+|[asdfghjkl]+|[zxcvbnm]+")) {
                list.add(word);
            }
        }
        return list.toArray(new String[list.size()]); // convert from list to array
    }
}

__________________________________________________________________
We are to write the letters of a given string S, from left to right into lines.
Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units,
it is written on the next line.
We are given an array widths, an array where widths[0] is the width of 'a', widths[1] is the width of 'b'
, ..., and widths[25] is the width of 'z'.

Now answer two questions: how many lines have at least one character from S,
and what is the width used by the last such line? Return your answer as an integer list of length 2.

 

Example :
Input: 
widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
S = "abcdefghijklmnopqrstuvwxyz"
Output: [3, 60]
Explanation: 
All letters have the same length of 10. To write all 26 letters,
we need two full lines and one line with 60 units.

my code
_____________________________
 public static int[] numberOfLines(int[] widts, String s) {
        int l=0;int w=0;
   int res[]=new int[2];
   for(int i=0;i<s.length();i++){
       int sca=(int)s.charAt(i);
       w+=widts[sca-97];
       if(w==100){
           l+=1;
           w=w-100;
       }else if(w>100){
           l+=1;
           if(i==s.length()-1){
               l+=1;
                  w=w-100;
           }
           }else if(i==s.length()-1)
               l+=1;
           
       }
   
   res[0]=l;
   res[1]=w;
        

    return res;
}
}

 
